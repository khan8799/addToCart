{"version":3,"sources":["ng://ngx-paypal/lib/models/paypal-funding.ts","ng://ngx-paypal/lib/models/paypal-integration.ts","ng://ngx-paypal/lib/components/paypal-component.ts","ng://ngx-paypal/lib/ngx-paypal.module.ts","ng://ngx-paypal/lib/models/paypal-models.ts","ng://ngx-paypal/lib/models/paypal-environment.ts"],"names":["Card","Credit","Elv","ClientSideREST","ServerSideREST","NgxPaypalComponent","this","useGlobalConfig","registerPayPalScriptWhenContainerIsReady","defaultPollInterval","maximumPollWaitTime","paypalWindowName","paypalWindowScriptInitiated","paypalScriptUrl","payPalButtonContainerIdPrefix","ngUnsubscribe","Subject","Object","defineProperty","prototype","content","_payPalButtonContainerElem","ngOnChanges","changes","config","initPayPal","ngAfterViewInit","setupScript","ngOnDestroy","next","complete","payPalButtonContainerId","getPseudoUniqueNumber","window","handleScriptRegistering","pollUntilScriptAvailable","addPayPalScriptToPage","Date","valueOf","_this","obs","interval","pipe","takeUntil","map","x","console","warn","unsubscribe","subscribe","script","document","createElement","innerHTML","src","onload","async","defer","paypalScriptElem","nativeElement","appendChild","id","Error","Button","render","env","environment","toString","commit","client","getClient","style","button","funding","getFunding","payment","data","actions","integrationType","PayPalIntegrationType","toPromise","then","paymentId","transactions","Array","isArray","length","experienceConfig","experience","create","intent","input_fields","no_shipping","noShipping","presentation","brand_name","brandName","logo_image","logoImage","locale_code","localeCode","onAuthorize","execute","onPaymentComplete","onError","err","onCancel","onClick","validate","undefined","production","sandbox","allowed","disallowed","forEach","type","push","mapFundingType","PayPalFunding","paypal","FUNDING","CARD","CREDIT","ELV","Component","args","changeDetection","ChangeDetectionStrategy","OnPush","selector","template","Input","ViewChild","NgxPayPalModule","NgModule","imports","declarations","exports","PayPalConfig","assign","Sandbox","Production"],"mappings":"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","sourcesContent":["export enum PayPalFunding {\r\n    Card,\r\n    Credit,\r\n    Elv\r\n}\r\n","export enum PayPalIntegrationType {\r\n    ClientSideREST,\r\n    ServerSideREST,\r\n}\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    SimpleChanges,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { interval, Subject } from 'rxjs';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\n\r\nimport { PayPalFunding } from '../models/paypal-funding';\r\nimport { PayPalIntegrationType } from '../models/paypal-integration';\r\nimport { IPaypalClient, IPayPalPaymentCompleteData, PayPalConfig } from '../models/paypal-models';\r\n\r\n/**\r\n * Global variable where PayPal is loaded to\r\n */\r\ndeclare var paypal: any;\r\n\r\n@Component({\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    selector: 'ngx-paypal',\r\n    template: `\r\n    <div #payPalScriptElem></div>\r\n    <div #payPalButtonContainerElem [id]=\"payPalButtonContainerId\"></div>\r\n    `\r\n})\r\nexport class NgxPaypalComponent implements OnChanges, AfterViewInit, OnDestroy {\r\n\r\n    /**\r\n     * Configuration for paypal.\r\n     */\r\n    @Input() config: PayPalConfig;\r\n\r\n    /**\r\n     * Indicates if global configuration (provided via 'forRoot') is used\r\n     */\r\n    @Input() useGlobalConfig = false;\r\n\r\n    /**\r\n     * Container for paypal script\r\n     */\r\n    @ViewChild('payPalScriptElem') paypalScriptElem: ElementRef;\r\n\r\n    /**\r\n     * Used for indicating delayed rendered if container is not yet ready in DOM\r\n     */\r\n    private registerPayPalScriptWhenContainerIsReady = false;\r\n\r\n    /**\r\n     * Holds current container element\r\n     */\r\n    private _payPalButtonContainerElem?: ElementRef;\r\n    @ViewChild('payPalButtonContainerElem') set payPalButtonContainerElem(content: ElementRef) {\r\n        if (content) {\r\n            this._payPalButtonContainerElem = content;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Polling interval if paypal script is pending\r\n     */\r\n    private readonly defaultPollInterval = 50;\r\n\r\n    /**\r\n     * Polling will stop after polling reaches this number\r\n     */\r\n    private readonly maximumPollWaitTime = 5000;\r\n\r\n    /**\r\n    * Name of the global variable where paypal is stored\r\n    */\r\n    private readonly paypalWindowName = 'paypal';\r\n\r\n    /**\r\n     * Name of the global variable indicating that script was initiated (added to page)\r\n     */\r\n    private readonly paypalWindowScriptInitiated = 'ngx-paypal-script-initiated';\r\n\r\n    /**\r\n     * PayPal integration script url\r\n     */\r\n    private readonly paypalScriptUrl = 'https://www.paypalobjects.com/api/checkout.js';\r\n\r\n    /**\r\n     * Id of the element where PayPal button will be rendered\r\n     */\r\n    public payPalButtonContainerId?: string;\r\n\r\n    private readonly payPalButtonContainerIdPrefix = 'ngx-paypal-button-container-';\r\n\r\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\r\n\r\n    constructor(\r\n    ) {\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // init when config once its available\r\n        if (this.config) {\r\n            this.initPayPal();\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        // register script if element is ready in dom\r\n        if (this.registerPayPalScriptWhenContainerIsReady && this._payPalButtonContainerElem) {\r\n            this.setupScript();\r\n            this.registerPayPalScriptWhenContainerIsReady = false;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    private initPayPal(): void {\r\n        // set unique paypal container button id\r\n        this.payPalButtonContainerId = `${this.payPalButtonContainerIdPrefix}${this.getPseudoUniqueNumber()}`;\r\n        // check if paypal was already register and if so, don't add it to page again\r\n        if (!window[this.paypalWindowName]) {\r\n            // check if script is pending\r\n            if (window[this.paypalWindowScriptInitiated] === true) {\r\n                this.pollUntilScriptAvailable();\r\n            } else {\r\n                // register script and set global flag\r\n                window[this.paypalWindowScriptInitiated] = true;\r\n                this.addPayPalScriptToPage();\r\n            }\r\n\r\n        } else {\r\n            // just register payment\r\n            this.handleScriptRegistering();\r\n        }\r\n    }\r\n\r\n    private getPseudoUniqueNumber(): number {\r\n        return new Date().valueOf();\r\n    }\r\n\r\n    /**\r\n     * Used when there are multiple paypal components on the same page beacuse only 1 of them\r\n     * may register paypal script. The other has to be polling until paypal is available or component destroyed\r\n     */\r\n    private pollUntilScriptAvailable(): void {\r\n        const obs = interval(this.defaultPollInterval)\r\n            .pipe(\r\n                takeUntil(this.ngUnsubscribe),\r\n                map((x) => {\r\n                    if (x >= this.maximumPollWaitTime) {\r\n                        console.warn(`PayPal script was not loaded after '${this.maximumPollWaitTime}' maximum polling time.`);\r\n                        obs.unsubscribe();\r\n                        return;\r\n                    }\r\n\r\n                    // check if paypal script exists\r\n                    if (window[this.paypalWindowName]) {\r\n                        // register script\r\n                        this.handleScriptRegistering();\r\n\r\n                        // stop execution\r\n                        obs.unsubscribe();\r\n                    }\r\n                })\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    private addPayPalScriptToPage(): void {\r\n        const script = document.createElement('script');\r\n        script.innerHTML = '';\r\n        script.src = this.paypalScriptUrl;\r\n        script.onload = () => this.handleScriptRegistering();\r\n        script.async = true;\r\n        script.defer = true;\r\n\r\n        this.paypalScriptElem.nativeElement.appendChild(script);\r\n    }\r\n\r\n    private handleScriptRegistering(): void {\r\n        // check if container with requested id exists\r\n        // this is here because dynamically switching between components would cause PayPal to\r\n        // throw an error if the container already existed before\r\n        if (this._payPalButtonContainerElem && this._payPalButtonContainerElem.nativeElement &&\r\n            this._payPalButtonContainerElem.nativeElement.id === this.payPalButtonContainerId) {\r\n            // container is ready, setup script right away\r\n            this.setupScript();\r\n        } else {\r\n            // container is not ready, delay registering until it is\r\n            this.registerPayPalScriptWhenContainerIsReady = true;\r\n        }\r\n    }\r\n\r\n    private setupScript(): void {\r\n        // first clear container\r\n        if (!this._payPalButtonContainerElem) {\r\n            throw Error(`Cannot setup script because paypal button container with id '${this.payPalButtonContainerId}' is not yet ready`);\r\n        }\r\n\r\n        this._payPalButtonContainerElem.nativeElement.innerHTML = '';\r\n\r\n        if (!window[this.paypalWindowName]) {\r\n            throw Error('PayPal script is not available');\r\n        }\r\n\r\n        // render PayPal button as per their docs at\r\n        // https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/add-paypal-button/\r\n        window[this.paypalWindowName].Button.render({\r\n            // set environment\r\n            env: this.config.environment.toString(),\r\n\r\n            // Show the buyer a 'Pay Now' button in the checkout flow\r\n            commit: this.config.commit,\r\n\r\n            // init client for client side integration\r\n            client: this.getClient(),\r\n\r\n            // set button config if available\r\n            style: this.config.button,\r\n\r\n            // set funding if available\r\n            funding: this.getFunding(),\r\n\r\n            // payment() is called when the button is clicked\r\n            payment: (data, actions) => {\r\n                if (this.config.integrationType === PayPalIntegrationType.ServerSideREST) {\r\n                    // client needs to create payment on server side\r\n                    if (!this.config.payment) {\r\n                        throw Error(`You need set up a create payment method and return\r\n                            PayPal's payment id when using server side integration`);\r\n                    }\r\n\r\n                    // Paypal expects promise with payment id (string) to be returned\r\n                    return this.config.payment().toPromise()\r\n                        .then(paymentId => {\r\n                            return paymentId;\r\n                        });\r\n                }\r\n\r\n                if (this.config.integrationType === PayPalIntegrationType.ClientSideREST) {\r\n                    if (!this.config.transactions || !Array.isArray(this.config.transactions) || this.config.transactions.length <= 0) {\r\n                        throw Error(`You need to provide at least 1 transaction for client side integration`);\r\n                    }\r\n\r\n                    const experienceConfig = this.config.experience;\r\n                    return actions.payment.create({\r\n                        payment: {\r\n                            // Allow user to specifify intent, else use default 'sale'.\r\n                            intent: this.config.intent ? this.config.intent : 'sale',\r\n                            transactions: this.config.transactions\r\n                        },\r\n                        experience: {\r\n                            input_fields: {\r\n                                no_shipping: (experienceConfig && experienceConfig.noShipping) ? 1 : 0\r\n                            },\r\n                            presentation: {\r\n                                brand_name: (experienceConfig && experienceConfig.brandName) ? experienceConfig.brandName : null,\r\n                                logo_image: (experienceConfig && experienceConfig.logoImage) ? experienceConfig.logoImage : null,\r\n                                locale_code: (experienceConfig && experienceConfig.localeCode) ? experienceConfig.localeCode : null\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n\r\n            // onAuthorize() is called when the buyer approves the payment\r\n            onAuthorize: (data: IPayPalPaymentCompleteData, actions: any) => {\r\n                if (this.config.integrationType === PayPalIntegrationType.ServerSideREST) {\r\n                    // client needs to server to execute the payment\r\n                    if (!this.config.onAuthorize) {\r\n                        throw Error(`You need set up an execute method when using server side integration`);\r\n                    }\r\n\r\n                    // Paypal expects promise\r\n                    return this.config.onAuthorize(data, actions).toPromise();\r\n                }\r\n\r\n                if (this.config.integrationType === PayPalIntegrationType.ClientSideREST) {\r\n                    // Make a call to the REST api to execute the payment\r\n                    return actions.payment.execute().then(() => {\r\n                        if (!this.config.onPaymentComplete) {\r\n                            throw Error(`You should provide some callback when payment is finished when using client side integration`);\r\n                        }\r\n                        this.config.onPaymentComplete(data, actions);\r\n                    });\r\n                }\r\n            },\r\n\r\n            onError: (err) => {\r\n                if (this.config.onError) {\r\n                    this.config.onError(err);\r\n                }\r\n            },\r\n\r\n            onCancel: (data, actions) => {\r\n                if (this.config.onCancel) {\r\n                    this.config.onCancel(data, actions);\r\n                }\r\n            },\r\n            onClick: () => {\r\n                if (this.config.onClick) {\r\n                    this.config.onClick();\r\n                }\r\n            },\r\n            validate: (actions) => {\r\n                if (this.config.validate) {\r\n                    this.config.validate(actions);\r\n                }\r\n            }\r\n        }, `#${this.payPalButtonContainerId}`);\r\n    }\r\n\r\n    private getClient(): IPaypalClient | undefined {\r\n        if (this.config.integrationType === PayPalIntegrationType.ClientSideREST) {\r\n            if (!this.config.client) {\r\n                throw Error(`You need to setup client information when using client side integration`);\r\n            }\r\n\r\n            return {\r\n                production: this.config.client.production,\r\n                sandbox: this.config.client.sandbox\r\n            };\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private getFunding(): {\r\n        allowed: any[],\r\n        disallowed: any[]\r\n    } | undefined {\r\n        // resolve funding to use paypal's properties\r\n        if (!this.config.funding) {\r\n            // no funding provided\r\n            return undefined;\r\n        }\r\n\r\n        const allowed: any[] = [];\r\n        const disallowed: any[] = [];\r\n\r\n        if (this.config.funding.allowed) {\r\n            this.config.funding.allowed.forEach(type => {\r\n                allowed.push(this.mapFundingType(type));\r\n            });\r\n        }\r\n\r\n        if (this.config.funding.disallowed) {\r\n            this.config.funding.disallowed.forEach(type => {\r\n                disallowed.push(this.mapFundingType(type));\r\n            });\r\n        }\r\n\r\n        return {\r\n            allowed: allowed,\r\n            disallowed: disallowed\r\n        };\r\n    }\r\n\r\n    private mapFundingType(type: PayPalFunding): any {\r\n        if (type === PayPalFunding.Card) {\r\n            return paypal.FUNDING.CARD;\r\n        }\r\n        if (type === PayPalFunding.Credit) {\r\n            return paypal.FUNDING.CREDIT;\r\n        }\r\n        if (type === PayPalFunding.Elv) {\r\n            return paypal.FUNDING.ELV;\r\n        }\r\n        throw Error(`Unsupported funding type '${type}'`);\r\n    }\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { NgxPaypalComponent } from './components/paypal-component';\r\n\r\n@NgModule({\r\n  imports: [\r\n  ],\r\n  declarations: [\r\n    NgxPaypalComponent,\r\n  ],\r\n  exports: [\r\n    NgxPaypalComponent,\r\n  ]\r\n})\r\nexport class NgxPayPalModule {\r\n}\r\n\r\n\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { PayPalFunding } from './paypal-funding';\r\nimport { PayPalEnvironment } from './paypal-environment';\r\nimport { PayPalIntegrationType } from './paypal-integration';\r\n\r\nexport class PayPalConfig {\r\n\r\n    /**\r\n     * Show 'Pay Now' button config\r\n     */\r\n    public commit = true;\r\n\r\n    /**\r\n     * Set the intent of the payment.\r\n     */\r\n    public intent = 'sale';\r\n\r\n    /**\r\n     * Called to create new payment for server side integration\r\n     */\r\n    public payment?: () => Observable<string>;\r\n\r\n    /**\r\n     * Called to execute payment for server side integration\r\n     */\r\n    public onAuthorize?: (data: IPayPalPaymentCompleteData, actions: any) => Observable<void>;\r\n\r\n    /**\r\n     * Client tokens for client side integration\r\n     */\r\n    public client?: IPaypalClient;\r\n\r\n    /**\r\n     * Array of transaction, required for client side integration\r\n     */\r\n    public transactions?: IPayPalTransaction[];\r\n\r\n    /**\r\n     * Payment Experience configurations\r\n     */\r\n    public experience?: IPayPalExperience;\r\n\r\n    /**\r\n     * Called for client side integration when payment is executed\r\n     */\r\n    public onPaymentComplete?: (data: IPayPalPaymentCompleteData, actions: any) => void;\r\n\r\n    /**\r\n     * Button configuration\r\n     */\r\n    public button?: IPayPalButtonStyle;\r\n\r\n    /**\r\n     * Paypal funding configuration\r\n     */\r\n    public funding?: IPayPalFunding;\r\n\r\n    /**\r\n     * Called when PayPal experiences an error\r\n     */\r\n    public onError?: (err: any) => void;\r\n\r\n    /**\r\n     * This handler will be called for every click on the PayPal button\r\n     */\r\n    public onClick?: () => void;\r\n\r\n    /**\r\n     * Called when user cancels payment\r\n     */\r\n    public onCancel?: (data: IPayPalCancelPayment, actions: any) => void;\r\n\r\n    /**\r\n     * Can be used to validation as can be seen here: https://developer.paypal.com/demo/checkout/#/pattern/validation\r\n     */\r\n    public validate?: (actions: any) => void;\r\n\r\n    constructor(\r\n        /**\r\n         * Type of the integration\r\n         */\r\n        public integrationType: PayPalIntegrationType,\r\n        /**\r\n         * Environment\r\n         */\r\n        public environment: PayPalEnvironment,\r\n        config: {\r\n            onError?: (err: any) => void,\r\n            onClick?: () => void,\r\n            validate?: (actions: any) => void;\r\n            onCancel?: (data: IPayPalCancelPayment, actions: any) => void,\r\n            payment?: () => Observable<string>,\r\n            intent?: string,\r\n            onAuthorize?: (data: IPayPalPaymentCompleteData, actions: any) => Observable<void>,\r\n            client?: IPaypalClient,\r\n            onPaymentComplete?: (data: IPayPalPaymentCompleteData, actions: any) => void,\r\n            transactions?: IPayPalTransaction[],\r\n            note_to_payer?: string;\r\n            experience?: IPayPalExperience,\r\n            commit?: boolean,\r\n            button?: IPayPalButtonStyle,\r\n            funding?: IPayPalFunding\r\n        }) {\r\n        Object.assign(this, config);\r\n    }\r\n}\r\n\r\nexport interface IPayPalPaymentCompleteData {\r\n    intent: string;\r\n    orderID: string;\r\n    payerID: string;\r\n    paymentID: string;\r\n    paymentToken: string;\r\n    returnUrl: string;\r\n}\r\n\r\nexport interface IPayPalCancelPayment {\r\n    data: IPayPalCancelPaymentData;\r\n    actions: any;\r\n}\r\n\r\nexport interface IPayPalCancelPaymentData {\r\n    billingID: string;\r\n    cancelUrl: string;\r\n    intent: string;\r\n    paymentID: string;\r\n    paymentToken: string;\r\n}\r\n\r\nexport interface IPaypalClient {\r\n    sandbox?: string;\r\n    production?: string;\r\n}\r\n\r\nexport interface IPayPalTransaction {\r\n    amount: IPayPalAmount;\r\n    description?: string;\r\n    custom?: string;\r\n    payment_options?: IPayPalTransactionPaymentOptions;\r\n    invoice_number?: string;\r\n    soft_descriptor?: string;\r\n    item_list?: IPayPalTransactionItemList;\r\n}\r\n\r\nexport interface IPayPalTransactionItemList {\r\n    items?: IPayPalTransactionItem[];\r\n    shipping_address?: IPayPalTransactionShippingAddress;\r\n}\r\n\r\nexport interface IPayPalTransactionItem {\r\n    name: string;\r\n    currency: string;\r\n    price: number;\r\n    quantity: number;\r\n\r\n    description?: string;\r\n    tax?: number;\r\n    sku?: string;\r\n}\r\n\r\nexport interface IPayPalAmount {\r\n    total: number;\r\n    currency: string;\r\n    details?: IPayPalAmountDetails;\r\n}\r\n\r\nexport interface IPayPalTransactionShippingAddress {\r\n    recipient_name: string;\r\n    line1: string;\r\n    line2?: string;\r\n    city: string;\r\n    country_code: string;\r\n    postal_code: string;\r\n    phone: string;\r\n    state: string;\r\n}\r\n\r\nexport interface IPayPalAmountDetails {\r\n    subtotal: number;\r\n    tax: number;\r\n    shipping: number;\r\n    handling_fee: number;\r\n    shipping_discount: number;\r\n    insurance: number;\r\n}\r\n\r\nexport interface IPayPalTransactionPaymentOptions {\r\n    allowed_payment_method?: string;\r\n}\r\n\r\nexport interface IPayPalExperience {\r\n    /** Indicates whether PayPal displays shipping address fields on the experience pages */\r\n    noShipping?: boolean;\r\n    /** A label that overrides the business name in the PayPal account on the PayPal pages. Max length: 127 characters. */\r\n    brandName?: string;\r\n    /** URL to the logo image (gif, jpg, or png). The image's maximum width is 190 pixels and maximum height is 60 pixels. */\r\n    logoImage?: string;\r\n    /** Locale in which to display PayPal page */\r\n    localeCode?: string;\r\n}\r\n\r\nexport interface IPayPalButtonStyle {\r\n    label?: 'checkout' | 'pay' | 'buynow' | 'paypal';\r\n    size?: 'small' | 'medium' | 'large' | 'responsive';\r\n    shape?: 'pill' | 'rect';\r\n    color?: 'gold' | 'blue' | 'silver' | 'black';\r\n    layout?: 'horizontal' | 'vertical';\r\n    tagline?: false;\r\n    fundingicons?: boolean;\r\n    branding?: boolean;\r\n}\r\n\r\nexport interface IPayPalFunding {\r\n    allowed: PayPalFunding[];\r\n    disallowed: PayPalFunding[];\r\n}\r\n\r\n","export enum PayPalEnvironment {\r\n    Sandbox = 'sandbox',\r\n    Production = 'production'\r\n}\r\n"]}