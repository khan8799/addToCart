(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-paypal', ['exports', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global['ngx-paypal'] = {}),global.ng.core,global.rxjs,global.rxjs.operators));
}(this, (function (exports,core,rxjs,operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var PayPalFunding = {
        Card: 0,
        Credit: 1,
        Elv: 2,
    };
    PayPalFunding[PayPalFunding.Card] = 'Card';
    PayPalFunding[PayPalFunding.Credit] = 'Credit';
    PayPalFunding[PayPalFunding.Elv] = 'Elv';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var PayPalIntegrationType = {
        ClientSideREST: 0,
        ServerSideREST: 1,
    };
    PayPalIntegrationType[PayPalIntegrationType.ClientSideREST] = 'ClientSideREST';
    PayPalIntegrationType[PayPalIntegrationType.ServerSideREST] = 'ServerSideREST';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxPaypalComponent = /** @class */ (function () {
        function NgxPaypalComponent() {
            /**
             * Indicates if global configuration (provided via 'forRoot') is used
             */
            this.useGlobalConfig = false;
            /**
             * Used for indicating delayed rendered if container is not yet ready in DOM
             */
            this.registerPayPalScriptWhenContainerIsReady = false;
            /**
             * Polling interval if paypal script is pending
             */
            this.defaultPollInterval = 50;
            /**
             * Polling will stop after polling reaches this number
             */
            this.maximumPollWaitTime = 5000;
            /**
             * Name of the global variable where paypal is stored
             */
            this.paypalWindowName = 'paypal';
            /**
             * Name of the global variable indicating that script was initiated (added to page)
             */
            this.paypalWindowScriptInitiated = 'ngx-paypal-script-initiated';
            /**
             * PayPal integration script url
             */
            this.paypalScriptUrl = 'https://www.paypalobjects.com/api/checkout.js';
            this.payPalButtonContainerIdPrefix = 'ngx-paypal-button-container-';
            this.ngUnsubscribe = new rxjs.Subject();
        }
        Object.defineProperty(NgxPaypalComponent.prototype, "payPalButtonContainerElem", {
            set: /**
             * @param {?} content
             * @return {?}
             */ function (content) {
                if (content) {
                    this._payPalButtonContainerElem = content;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        NgxPaypalComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                // init when config once its available
                if (this.config) {
                    this.initPayPal();
                }
            };
        /**
         * @return {?}
         */
        NgxPaypalComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                // register script if element is ready in dom
                if (this.registerPayPalScriptWhenContainerIsReady && this._payPalButtonContainerElem) {
                    this.setupScript();
                    this.registerPayPalScriptWhenContainerIsReady = false;
                }
            };
        /**
         * @return {?}
         */
        NgxPaypalComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.ngUnsubscribe.next();
                this.ngUnsubscribe.complete();
            };
        /**
         * @return {?}
         */
        NgxPaypalComponent.prototype.initPayPal = /**
         * @return {?}
         */
            function () {
                // set unique paypal container button id
                this.payPalButtonContainerId = "" + this.payPalButtonContainerIdPrefix + this.getPseudoUniqueNumber();
                // check if paypal was already register and if so, don't add it to page again
                if (!window[this.paypalWindowName]) {
                    // check if script is pending
                    if (window[this.paypalWindowScriptInitiated] === true) {
                        this.pollUntilScriptAvailable();
                    }
                    else {
                        // register script and set global flag
                        window[this.paypalWindowScriptInitiated] = true;
                        this.addPayPalScriptToPage();
                    }
                }
                else {
                    // just register payment
                    this.handleScriptRegistering();
                }
            };
        /**
         * @return {?}
         */
        NgxPaypalComponent.prototype.getPseudoUniqueNumber = /**
         * @return {?}
         */
            function () {
                return new Date().valueOf();
            };
        /**
         * Used when there are multiple paypal components on the same page beacuse only 1 of them
         * may register paypal script. The other has to be polling until paypal is available or component destroyed
         */
        /**
         * Used when there are multiple paypal components on the same page beacuse only 1 of them
         * may register paypal script. The other has to be polling until paypal is available or component destroyed
         * @return {?}
         */
        NgxPaypalComponent.prototype.pollUntilScriptAvailable = /**
         * Used when there are multiple paypal components on the same page beacuse only 1 of them
         * may register paypal script. The other has to be polling until paypal is available or component destroyed
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var obs = rxjs.interval(this.defaultPollInterval)
                    .pipe(operators.takeUntil(this.ngUnsubscribe), operators.map(function (x) {
                    if (x >= _this.maximumPollWaitTime) {
                        console.warn("PayPal script was not loaded after '" + _this.maximumPollWaitTime + "' maximum polling time.");
                        obs.unsubscribe();
                        return;
                    }
                    // check if paypal script exists
                    if (window[_this.paypalWindowName]) {
                        // register script
                        _this.handleScriptRegistering();
                        // stop execution
                        obs.unsubscribe();
                    }
                }))
                    .subscribe();
            };
        /**
         * @return {?}
         */
        NgxPaypalComponent.prototype.addPayPalScriptToPage = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var script = document.createElement('script');
                script.innerHTML = '';
                script.src = this.paypalScriptUrl;
                script.onload = function () { return _this.handleScriptRegistering(); };
                script.async = true;
                script.defer = true;
                this.paypalScriptElem.nativeElement.appendChild(script);
            };
        /**
         * @return {?}
         */
        NgxPaypalComponent.prototype.handleScriptRegistering = /**
         * @return {?}
         */
            function () {
                // check if container with requested id exists
                // this is here because dynamically switching between components would cause PayPal to
                // throw an error if the container already existed before
                if (this._payPalButtonContainerElem && this._payPalButtonContainerElem.nativeElement &&
                    this._payPalButtonContainerElem.nativeElement.id === this.payPalButtonContainerId) {
                    // container is ready, setup script right away
                    this.setupScript();
                }
                else {
                    // container is not ready, delay registering until it is
                    this.registerPayPalScriptWhenContainerIsReady = true;
                }
            };
        /**
         * @return {?}
         */
        NgxPaypalComponent.prototype.setupScript = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // first clear container
                if (!this._payPalButtonContainerElem) {
                    throw Error("Cannot setup script because paypal button container with id '" + this.payPalButtonContainerId + "' is not yet ready");
                }
                this._payPalButtonContainerElem.nativeElement.innerHTML = '';
                if (!window[this.paypalWindowName]) {
                    throw Error('PayPal script is not available');
                }
                // render PayPal button as per their docs at
                // https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/add-paypal-button/
                window[this.paypalWindowName].Button.render({
                    // set environment
                    env: this.config.environment.toString(),
                    // Show the buyer a 'Pay Now' button in the checkout flow
                    commit: this.config.commit,
                    // init client for client side integration
                    client: this.getClient(),
                    // set button config if available
                    style: this.config.button,
                    // set funding if available
                    funding: this.getFunding(),
                    // payment() is called when the button is clicked
                    payment: function (data, actions) {
                        if (_this.config.integrationType === PayPalIntegrationType.ServerSideREST) {
                            // client needs to create payment on server side
                            if (!_this.config.payment) {
                                throw Error("You need set up a create payment method and return\n                            PayPal's payment id when using server side integration");
                            }
                            // Paypal expects promise with payment id (string) to be returned
                            return _this.config.payment().toPromise()
                                .then(function (paymentId) {
                                return paymentId;
                            });
                        }
                        if (_this.config.integrationType === PayPalIntegrationType.ClientSideREST) {
                            if (!_this.config.transactions || !Array.isArray(_this.config.transactions) || _this.config.transactions.length <= 0) {
                                throw Error("You need to provide at least 1 transaction for client side integration");
                            }
                            /** @type {?} */
                            var experienceConfig = _this.config.experience;
                            return actions.payment.create({
                                payment: {
                                    // Allow user to specifify intent, else use default 'sale'.
                                    intent: _this.config.intent ? _this.config.intent : 'sale',
                                    transactions: _this.config.transactions
                                },
                                experience: {
                                    input_fields: {
                                        no_shipping: (experienceConfig && experienceConfig.noShipping) ? 1 : 0
                                    },
                                    presentation: {
                                        brand_name: (experienceConfig && experienceConfig.brandName) ? experienceConfig.brandName : null,
                                        logo_image: (experienceConfig && experienceConfig.logoImage) ? experienceConfig.logoImage : null,
                                        locale_code: (experienceConfig && experienceConfig.localeCode) ? experienceConfig.localeCode : null
                                    }
                                }
                            });
                        }
                    },
                    // onAuthorize() is called when the buyer approves the payment
                    onAuthorize: function (data, actions) {
                        if (_this.config.integrationType === PayPalIntegrationType.ServerSideREST) {
                            // client needs to server to execute the payment
                            if (!_this.config.onAuthorize) {
                                throw Error("You need set up an execute method when using server side integration");
                            }
                            // Paypal expects promise
                            return _this.config.onAuthorize(data, actions).toPromise();
                        }
                        if (_this.config.integrationType === PayPalIntegrationType.ClientSideREST) {
                            // Make a call to the REST api to execute the payment
                            return actions.payment.execute().then(function () {
                                if (!_this.config.onPaymentComplete) {
                                    throw Error("You should provide some callback when payment is finished when using client side integration");
                                }
                                _this.config.onPaymentComplete(data, actions);
                            });
                        }
                    },
                    onError: function (err) {
                        if (_this.config.onError) {
                            _this.config.onError(err);
                        }
                    },
                    onCancel: function (data, actions) {
                        if (_this.config.onCancel) {
                            _this.config.onCancel(data, actions);
                        }
                    },
                    onClick: function () {
                        if (_this.config.onClick) {
                            _this.config.onClick();
                        }
                    },
                    validate: function (actions) {
                        if (_this.config.validate) {
                            _this.config.validate(actions);
                        }
                    }
                }, "#" + this.payPalButtonContainerId);
            };
        /**
         * @return {?}
         */
        NgxPaypalComponent.prototype.getClient = /**
         * @return {?}
         */
            function () {
                if (this.config.integrationType === PayPalIntegrationType.ClientSideREST) {
                    if (!this.config.client) {
                        throw Error("You need to setup client information when using client side integration");
                    }
                    return {
                        production: this.config.client.production,
                        sandbox: this.config.client.sandbox
                    };
                }
                return undefined;
            };
        /**
         * @return {?}
         */
        NgxPaypalComponent.prototype.getFunding = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // resolve funding to use paypal's properties
                if (!this.config.funding) {
                    // no funding provided
                    return undefined;
                }
                /** @type {?} */
                var allowed = [];
                /** @type {?} */
                var disallowed = [];
                if (this.config.funding.allowed) {
                    this.config.funding.allowed.forEach(function (type) {
                        allowed.push(_this.mapFundingType(type));
                    });
                }
                if (this.config.funding.disallowed) {
                    this.config.funding.disallowed.forEach(function (type) {
                        disallowed.push(_this.mapFundingType(type));
                    });
                }
                return {
                    allowed: allowed,
                    disallowed: disallowed
                };
            };
        /**
         * @param {?} type
         * @return {?}
         */
        NgxPaypalComponent.prototype.mapFundingType = /**
         * @param {?} type
         * @return {?}
         */
            function (type) {
                if (type === PayPalFunding.Card) {
                    return paypal.FUNDING.CARD;
                }
                if (type === PayPalFunding.Credit) {
                    return paypal.FUNDING.CREDIT;
                }
                if (type === PayPalFunding.Elv) {
                    return paypal.FUNDING.ELV;
                }
                throw Error("Unsupported funding type '" + type + "'");
            };
        NgxPaypalComponent.decorators = [
            { type: core.Component, args: [{
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        selector: 'ngx-paypal',
                        template: "\n    <div #payPalScriptElem></div>\n    <div #payPalButtonContainerElem [id]=\"payPalButtonContainerId\"></div>\n    "
                    }] }
        ];
        /** @nocollapse */
        NgxPaypalComponent.ctorParameters = function () { return []; };
        NgxPaypalComponent.propDecorators = {
            config: [{ type: core.Input }],
            useGlobalConfig: [{ type: core.Input }],
            paypalScriptElem: [{ type: core.ViewChild, args: ['payPalScriptElem',] }],
            payPalButtonContainerElem: [{ type: core.ViewChild, args: ['payPalButtonContainerElem',] }]
        };
        return NgxPaypalComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxPayPalModule = /** @class */ (function () {
        function NgxPayPalModule() {
        }
        NgxPayPalModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [],
                        declarations: [
                            NgxPaypalComponent,
                        ],
                        exports: [
                            NgxPaypalComponent,
                        ]
                    },] }
        ];
        return NgxPayPalModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var PayPalEnvironment = {
        Sandbox: 'sandbox',
        Production: 'production',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var PayPalConfig = /** @class */ (function () {
        function PayPalConfig(integrationType, environment, config) {
            this.integrationType = integrationType;
            this.environment = environment;
            /**
             * Show 'Pay Now' button config
             */
            this.commit = true;
            /**
             * Set the intent of the payment.
             */
            this.intent = 'sale';
            Object.assign(this, config);
        }
        return PayPalConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.NgxPayPalModule = NgxPayPalModule;
    exports.PayPalEnvironment = PayPalEnvironment;
    exports.PayPalFunding = PayPalFunding;
    exports.PayPalIntegrationType = PayPalIntegrationType;
    exports.PayPalConfig = PayPalConfig;
    exports.NgxPaypalComponent = NgxPaypalComponent;
    exports.ɵa = NgxPaypalComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXBheXBhbC51bWQuanMubWFwIiwic291cmNlcyI6WyJuZzovL25neC1wYXlwYWwvbGliL21vZGVscy9wYXlwYWwtZnVuZGluZy50cyIsIm5nOi8vbmd4LXBheXBhbC9saWIvbW9kZWxzL3BheXBhbC1pbnRlZ3JhdGlvbi50cyIsIm5nOi8vbmd4LXBheXBhbC9saWIvY29tcG9uZW50cy9wYXlwYWwtY29tcG9uZW50LnRzIiwibmc6Ly9uZ3gtcGF5cGFsL2xpYi9uZ3gtcGF5cGFsLm1vZHVsZS50cyIsIm5nOi8vbmd4LXBheXBhbC9saWIvbW9kZWxzL3BheXBhbC1lbnZpcm9ubWVudC50cyIsIm5nOi8vbmd4LXBheXBhbC9saWIvbW9kZWxzL3BheXBhbC1tb2RlbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGVudW0gUGF5UGFsRnVuZGluZyB7XHJcbiAgICBDYXJkLFxyXG4gICAgQ3JlZGl0LFxyXG4gICAgRWx2XHJcbn1cclxuIiwiZXhwb3J0IGVudW0gUGF5UGFsSW50ZWdyYXRpb25UeXBlIHtcclxuICAgIENsaWVudFNpZGVSRVNULFxyXG4gICAgU2VydmVyU2lkZVJFU1QsXHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICAgIEFmdGVyVmlld0luaXQsXHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICAgIENvbXBvbmVudCxcclxuICAgIEVsZW1lbnRSZWYsXHJcbiAgICBJbnB1dCxcclxuICAgIE9uQ2hhbmdlcyxcclxuICAgIE9uRGVzdHJveSxcclxuICAgIFNpbXBsZUNoYW5nZXMsXHJcbiAgICBWaWV3Q2hpbGQsXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGludGVydmFsLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCwgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuaW1wb3J0IHsgUGF5UGFsRnVuZGluZyB9IGZyb20gJy4uL21vZGVscy9wYXlwYWwtZnVuZGluZyc7XHJcbmltcG9ydCB7IFBheVBhbEludGVncmF0aW9uVHlwZSB9IGZyb20gJy4uL21vZGVscy9wYXlwYWwtaW50ZWdyYXRpb24nO1xyXG5pbXBvcnQgeyBJUGF5cGFsQ2xpZW50LCBJUGF5UGFsUGF5bWVudENvbXBsZXRlRGF0YSwgUGF5UGFsQ29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL3BheXBhbC1tb2RlbHMnO1xyXG5cclxuLyoqXHJcbiAqIEdsb2JhbCB2YXJpYWJsZSB3aGVyZSBQYXlQYWwgaXMgbG9hZGVkIHRvXHJcbiAqL1xyXG5kZWNsYXJlIHZhciBwYXlwYWw6IGFueTtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgICBzZWxlY3RvcjogJ25neC1wYXlwYWwnLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXYgI3BheVBhbFNjcmlwdEVsZW0+PC9kaXY+XHJcbiAgICA8ZGl2ICNwYXlQYWxCdXR0b25Db250YWluZXJFbGVtIFtpZF09XCJwYXlQYWxCdXR0b25Db250YWluZXJJZFwiPjwvZGl2PlxyXG4gICAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4UGF5cGFsQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uZmlndXJhdGlvbiBmb3IgcGF5cGFsLlxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSBjb25maWc6IFBheVBhbENvbmZpZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEluZGljYXRlcyBpZiBnbG9iYWwgY29uZmlndXJhdGlvbiAocHJvdmlkZWQgdmlhICdmb3JSb290JykgaXMgdXNlZFxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSB1c2VHbG9iYWxDb25maWcgPSBmYWxzZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnRhaW5lciBmb3IgcGF5cGFsIHNjcmlwdFxyXG4gICAgICovXHJcbiAgICBAVmlld0NoaWxkKCdwYXlQYWxTY3JpcHRFbGVtJykgcGF5cGFsU2NyaXB0RWxlbTogRWxlbWVudFJlZjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgZm9yIGluZGljYXRpbmcgZGVsYXllZCByZW5kZXJlZCBpZiBjb250YWluZXIgaXMgbm90IHlldCByZWFkeSBpbiBET01cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZWdpc3RlclBheVBhbFNjcmlwdFdoZW5Db250YWluZXJJc1JlYWR5ID0gZmFsc2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIb2xkcyBjdXJyZW50IGNvbnRhaW5lciBlbGVtZW50XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX3BheVBhbEJ1dHRvbkNvbnRhaW5lckVsZW0/OiBFbGVtZW50UmVmO1xyXG4gICAgQFZpZXdDaGlsZCgncGF5UGFsQnV0dG9uQ29udGFpbmVyRWxlbScpIHNldCBwYXlQYWxCdXR0b25Db250YWluZXJFbGVtKGNvbnRlbnQ6IEVsZW1lbnRSZWYpIHtcclxuICAgICAgICBpZiAoY29udGVudCkge1xyXG4gICAgICAgICAgICB0aGlzLl9wYXlQYWxCdXR0b25Db250YWluZXJFbGVtID0gY29udGVudDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQb2xsaW5nIGludGVydmFsIGlmIHBheXBhbCBzY3JpcHQgaXMgcGVuZGluZ1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRlZmF1bHRQb2xsSW50ZXJ2YWwgPSA1MDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBvbGxpbmcgd2lsbCBzdG9wIGFmdGVyIHBvbGxpbmcgcmVhY2hlcyB0aGlzIG51bWJlclxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1heGltdW1Qb2xsV2FpdFRpbWUgPSA1MDAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgKiBOYW1lIG9mIHRoZSBnbG9iYWwgdmFyaWFibGUgd2hlcmUgcGF5cGFsIGlzIHN0b3JlZFxyXG4gICAgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGF5cGFsV2luZG93TmFtZSA9ICdwYXlwYWwnO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTmFtZSBvZiB0aGUgZ2xvYmFsIHZhcmlhYmxlIGluZGljYXRpbmcgdGhhdCBzY3JpcHQgd2FzIGluaXRpYXRlZCAoYWRkZWQgdG8gcGFnZSlcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBwYXlwYWxXaW5kb3dTY3JpcHRJbml0aWF0ZWQgPSAnbmd4LXBheXBhbC1zY3JpcHQtaW5pdGlhdGVkJztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBheVBhbCBpbnRlZ3JhdGlvbiBzY3JpcHQgdXJsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGF5cGFsU2NyaXB0VXJsID0gJ2h0dHBzOi8vd3d3LnBheXBhbG9iamVjdHMuY29tL2FwaS9jaGVja291dC5qcyc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJZCBvZiB0aGUgZWxlbWVudCB3aGVyZSBQYXlQYWwgYnV0dG9uIHdpbGwgYmUgcmVuZGVyZWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHBheVBhbEJ1dHRvbkNvbnRhaW5lcklkPzogc3RyaW5nO1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGF5UGFsQnV0dG9uQ29udGFpbmVySWRQcmVmaXggPSAnbmd4LXBheXBhbC1idXR0b24tY29udGFpbmVyLSc7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBuZ1Vuc3Vic2NyaWJlOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICkge1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgICAgICAvLyBpbml0IHdoZW4gY29uZmlnIG9uY2UgaXRzIGF2YWlsYWJsZVxyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZykge1xyXG4gICAgICAgICAgICB0aGlzLmluaXRQYXlQYWwoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgICAgIC8vIHJlZ2lzdGVyIHNjcmlwdCBpZiBlbGVtZW50IGlzIHJlYWR5IGluIGRvbVxyXG4gICAgICAgIGlmICh0aGlzLnJlZ2lzdGVyUGF5UGFsU2NyaXB0V2hlbkNvbnRhaW5lcklzUmVhZHkgJiYgdGhpcy5fcGF5UGFsQnV0dG9uQ29udGFpbmVyRWxlbSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldHVwU2NyaXB0KCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJQYXlQYWxTY3JpcHRXaGVuQ29udGFpbmVySXNSZWFkeSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm5nVW5zdWJzY3JpYmUubmV4dCgpO1xyXG4gICAgICAgIHRoaXMubmdVbnN1YnNjcmliZS5jb21wbGV0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaW5pdFBheVBhbCgpOiB2b2lkIHtcclxuICAgICAgICAvLyBzZXQgdW5pcXVlIHBheXBhbCBjb250YWluZXIgYnV0dG9uIGlkXHJcbiAgICAgICAgdGhpcy5wYXlQYWxCdXR0b25Db250YWluZXJJZCA9IGAke3RoaXMucGF5UGFsQnV0dG9uQ29udGFpbmVySWRQcmVmaXh9JHt0aGlzLmdldFBzZXVkb1VuaXF1ZU51bWJlcigpfWA7XHJcbiAgICAgICAgLy8gY2hlY2sgaWYgcGF5cGFsIHdhcyBhbHJlYWR5IHJlZ2lzdGVyIGFuZCBpZiBzbywgZG9uJ3QgYWRkIGl0IHRvIHBhZ2UgYWdhaW5cclxuICAgICAgICBpZiAoIXdpbmRvd1t0aGlzLnBheXBhbFdpbmRvd05hbWVdKSB7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHNjcmlwdCBpcyBwZW5kaW5nXHJcbiAgICAgICAgICAgIGlmICh3aW5kb3dbdGhpcy5wYXlwYWxXaW5kb3dTY3JpcHRJbml0aWF0ZWRdID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvbGxVbnRpbFNjcmlwdEF2YWlsYWJsZSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVnaXN0ZXIgc2NyaXB0IGFuZCBzZXQgZ2xvYmFsIGZsYWdcclxuICAgICAgICAgICAgICAgIHdpbmRvd1t0aGlzLnBheXBhbFdpbmRvd1NjcmlwdEluaXRpYXRlZF0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRQYXlQYWxTY3JpcHRUb1BhZ2UoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBqdXN0IHJlZ2lzdGVyIHBheW1lbnRcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVTY3JpcHRSZWdpc3RlcmluZygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldFBzZXVkb1VuaXF1ZU51bWJlcigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSgpLnZhbHVlT2YoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgd2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUgcGF5cGFsIGNvbXBvbmVudHMgb24gdGhlIHNhbWUgcGFnZSBiZWFjdXNlIG9ubHkgMSBvZiB0aGVtXHJcbiAgICAgKiBtYXkgcmVnaXN0ZXIgcGF5cGFsIHNjcmlwdC4gVGhlIG90aGVyIGhhcyB0byBiZSBwb2xsaW5nIHVudGlsIHBheXBhbCBpcyBhdmFpbGFibGUgb3IgY29tcG9uZW50IGRlc3Ryb3llZFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHBvbGxVbnRpbFNjcmlwdEF2YWlsYWJsZSgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBvYnMgPSBpbnRlcnZhbCh0aGlzLmRlZmF1bHRQb2xsSW50ZXJ2YWwpXHJcbiAgICAgICAgICAgIC5waXBlKFxyXG4gICAgICAgICAgICAgICAgdGFrZVVudGlsKHRoaXMubmdVbnN1YnNjcmliZSksXHJcbiAgICAgICAgICAgICAgICBtYXAoKHgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeCA+PSB0aGlzLm1heGltdW1Qb2xsV2FpdFRpbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBQYXlQYWwgc2NyaXB0IHdhcyBub3QgbG9hZGVkIGFmdGVyICcke3RoaXMubWF4aW11bVBvbGxXYWl0VGltZX0nIG1heGltdW0gcG9sbGluZyB0aW1lLmApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYnMudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgcGF5cGFsIHNjcmlwdCBleGlzdHNcclxuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93W3RoaXMucGF5cGFsV2luZG93TmFtZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVnaXN0ZXIgc2NyaXB0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlU2NyaXB0UmVnaXN0ZXJpbmcoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0b3AgZXhlY3V0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9icy51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgLnN1YnNjcmliZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYWRkUGF5UGFsU2NyaXB0VG9QYWdlKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG4gICAgICAgIHNjcmlwdC5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICBzY3JpcHQuc3JjID0gdGhpcy5wYXlwYWxTY3JpcHRVcmw7XHJcbiAgICAgICAgc2NyaXB0Lm9ubG9hZCA9ICgpID0+IHRoaXMuaGFuZGxlU2NyaXB0UmVnaXN0ZXJpbmcoKTtcclxuICAgICAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xyXG4gICAgICAgIHNjcmlwdC5kZWZlciA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMucGF5cGFsU2NyaXB0RWxlbS5uYXRpdmVFbGVtZW50LmFwcGVuZENoaWxkKHNjcmlwdCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBoYW5kbGVTY3JpcHRSZWdpc3RlcmluZygpOiB2b2lkIHtcclxuICAgICAgICAvLyBjaGVjayBpZiBjb250YWluZXIgd2l0aCByZXF1ZXN0ZWQgaWQgZXhpc3RzXHJcbiAgICAgICAgLy8gdGhpcyBpcyBoZXJlIGJlY2F1c2UgZHluYW1pY2FsbHkgc3dpdGNoaW5nIGJldHdlZW4gY29tcG9uZW50cyB3b3VsZCBjYXVzZSBQYXlQYWwgdG9cclxuICAgICAgICAvLyB0aHJvdyBhbiBlcnJvciBpZiB0aGUgY29udGFpbmVyIGFscmVhZHkgZXhpc3RlZCBiZWZvcmVcclxuICAgICAgICBpZiAodGhpcy5fcGF5UGFsQnV0dG9uQ29udGFpbmVyRWxlbSAmJiB0aGlzLl9wYXlQYWxCdXR0b25Db250YWluZXJFbGVtLm5hdGl2ZUVsZW1lbnQgJiZcclxuICAgICAgICAgICAgdGhpcy5fcGF5UGFsQnV0dG9uQ29udGFpbmVyRWxlbS5uYXRpdmVFbGVtZW50LmlkID09PSB0aGlzLnBheVBhbEJ1dHRvbkNvbnRhaW5lcklkKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnRhaW5lciBpcyByZWFkeSwgc2V0dXAgc2NyaXB0IHJpZ2h0IGF3YXlcclxuICAgICAgICAgICAgdGhpcy5zZXR1cFNjcmlwdCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnRhaW5lciBpcyBub3QgcmVhZHksIGRlbGF5IHJlZ2lzdGVyaW5nIHVudGlsIGl0IGlzXHJcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJQYXlQYWxTY3JpcHRXaGVuQ29udGFpbmVySXNSZWFkeSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0dXBTY3JpcHQoKTogdm9pZCB7XHJcbiAgICAgICAgLy8gZmlyc3QgY2xlYXIgY29udGFpbmVyXHJcbiAgICAgICAgaWYgKCF0aGlzLl9wYXlQYWxCdXR0b25Db250YWluZXJFbGVtKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBDYW5ub3Qgc2V0dXAgc2NyaXB0IGJlY2F1c2UgcGF5cGFsIGJ1dHRvbiBjb250YWluZXIgd2l0aCBpZCAnJHt0aGlzLnBheVBhbEJ1dHRvbkNvbnRhaW5lcklkfScgaXMgbm90IHlldCByZWFkeWApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fcGF5UGFsQnV0dG9uQ29udGFpbmVyRWxlbS5uYXRpdmVFbGVtZW50LmlubmVySFRNTCA9ICcnO1xyXG5cclxuICAgICAgICBpZiAoIXdpbmRvd1t0aGlzLnBheXBhbFdpbmRvd05hbWVdKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdQYXlQYWwgc2NyaXB0IGlzIG5vdCBhdmFpbGFibGUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHJlbmRlciBQYXlQYWwgYnV0dG9uIGFzIHBlciB0aGVpciBkb2NzIGF0XHJcbiAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIucGF5cGFsLmNvbS9kb2NzL2ludGVncmF0aW9uL2RpcmVjdC9leHByZXNzLWNoZWNrb3V0L2ludGVncmF0aW9uLWpzdjQvYWRkLXBheXBhbC1idXR0b24vXHJcbiAgICAgICAgd2luZG93W3RoaXMucGF5cGFsV2luZG93TmFtZV0uQnV0dG9uLnJlbmRlcih7XHJcbiAgICAgICAgICAgIC8vIHNldCBlbnZpcm9ubWVudFxyXG4gICAgICAgICAgICBlbnY6IHRoaXMuY29uZmlnLmVudmlyb25tZW50LnRvU3RyaW5nKCksXHJcblxyXG4gICAgICAgICAgICAvLyBTaG93IHRoZSBidXllciBhICdQYXkgTm93JyBidXR0b24gaW4gdGhlIGNoZWNrb3V0IGZsb3dcclxuICAgICAgICAgICAgY29tbWl0OiB0aGlzLmNvbmZpZy5jb21taXQsXHJcblxyXG4gICAgICAgICAgICAvLyBpbml0IGNsaWVudCBmb3IgY2xpZW50IHNpZGUgaW50ZWdyYXRpb25cclxuICAgICAgICAgICAgY2xpZW50OiB0aGlzLmdldENsaWVudCgpLFxyXG5cclxuICAgICAgICAgICAgLy8gc2V0IGJ1dHRvbiBjb25maWcgaWYgYXZhaWxhYmxlXHJcbiAgICAgICAgICAgIHN0eWxlOiB0aGlzLmNvbmZpZy5idXR0b24sXHJcblxyXG4gICAgICAgICAgICAvLyBzZXQgZnVuZGluZyBpZiBhdmFpbGFibGVcclxuICAgICAgICAgICAgZnVuZGluZzogdGhpcy5nZXRGdW5kaW5nKCksXHJcblxyXG4gICAgICAgICAgICAvLyBwYXltZW50KCkgaXMgY2FsbGVkIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkXHJcbiAgICAgICAgICAgIHBheW1lbnQ6IChkYXRhLCBhY3Rpb25zKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25maWcuaW50ZWdyYXRpb25UeXBlID09PSBQYXlQYWxJbnRlZ3JhdGlvblR5cGUuU2VydmVyU2lkZVJFU1QpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjbGllbnQgbmVlZHMgdG8gY3JlYXRlIHBheW1lbnQgb24gc2VydmVyIHNpZGVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29uZmlnLnBheW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoYFlvdSBuZWVkIHNldCB1cCBhIGNyZWF0ZSBwYXltZW50IG1ldGhvZCBhbmQgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXlQYWwncyBwYXltZW50IGlkIHdoZW4gdXNpbmcgc2VydmVyIHNpZGUgaW50ZWdyYXRpb25gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFBheXBhbCBleHBlY3RzIHByb21pc2Ugd2l0aCBwYXltZW50IGlkIChzdHJpbmcpIHRvIGJlIHJldHVybmVkXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLnBheW1lbnQoKS50b1Byb21pc2UoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihwYXltZW50SWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBheW1lbnRJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLmludGVncmF0aW9uVHlwZSA9PT0gUGF5UGFsSW50ZWdyYXRpb25UeXBlLkNsaWVudFNpZGVSRVNUKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy50cmFuc2FjdGlvbnMgfHwgIUFycmF5LmlzQXJyYXkodGhpcy5jb25maWcudHJhbnNhY3Rpb25zKSB8fCB0aGlzLmNvbmZpZy50cmFuc2FjdGlvbnMubGVuZ3RoIDw9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoYFlvdSBuZWVkIHRvIHByb3ZpZGUgYXQgbGVhc3QgMSB0cmFuc2FjdGlvbiBmb3IgY2xpZW50IHNpZGUgaW50ZWdyYXRpb25gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4cGVyaWVuY2VDb25maWcgPSB0aGlzLmNvbmZpZy5leHBlcmllbmNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb25zLnBheW1lbnQuY3JlYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF5bWVudDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWxsb3cgdXNlciB0byBzcGVjaWZpZnkgaW50ZW50LCBlbHNlIHVzZSBkZWZhdWx0ICdzYWxlJy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVudDogdGhpcy5jb25maWcuaW50ZW50ID8gdGhpcy5jb25maWcuaW50ZW50IDogJ3NhbGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25zOiB0aGlzLmNvbmZpZy50cmFuc2FjdGlvbnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZXJpZW5jZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRfZmllbGRzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9fc2hpcHBpbmc6IChleHBlcmllbmNlQ29uZmlnICYmIGV4cGVyaWVuY2VDb25maWcubm9TaGlwcGluZykgPyAxIDogMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXNlbnRhdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyYW5kX25hbWU6IChleHBlcmllbmNlQ29uZmlnICYmIGV4cGVyaWVuY2VDb25maWcuYnJhbmROYW1lKSA/IGV4cGVyaWVuY2VDb25maWcuYnJhbmROYW1lIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dvX2ltYWdlOiAoZXhwZXJpZW5jZUNvbmZpZyAmJiBleHBlcmllbmNlQ29uZmlnLmxvZ29JbWFnZSkgPyBleHBlcmllbmNlQ29uZmlnLmxvZ29JbWFnZSA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlX2NvZGU6IChleHBlcmllbmNlQ29uZmlnICYmIGV4cGVyaWVuY2VDb25maWcubG9jYWxlQ29kZSkgPyBleHBlcmllbmNlQ29uZmlnLmxvY2FsZUNvZGUgOiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIC8vIG9uQXV0aG9yaXplKCkgaXMgY2FsbGVkIHdoZW4gdGhlIGJ1eWVyIGFwcHJvdmVzIHRoZSBwYXltZW50XHJcbiAgICAgICAgICAgIG9uQXV0aG9yaXplOiAoZGF0YTogSVBheVBhbFBheW1lbnRDb21wbGV0ZURhdGEsIGFjdGlvbnM6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLmludGVncmF0aW9uVHlwZSA9PT0gUGF5UGFsSW50ZWdyYXRpb25UeXBlLlNlcnZlclNpZGVSRVNUKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY2xpZW50IG5lZWRzIHRvIHNlcnZlciB0byBleGVjdXRlIHRoZSBwYXltZW50XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5vbkF1dGhvcml6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihgWW91IG5lZWQgc2V0IHVwIGFuIGV4ZWN1dGUgbWV0aG9kIHdoZW4gdXNpbmcgc2VydmVyIHNpZGUgaW50ZWdyYXRpb25gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFBheXBhbCBleHBlY3RzIHByb21pc2VcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25maWcub25BdXRob3JpemUoZGF0YSwgYWN0aW9ucykudG9Qcm9taXNlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLmludGVncmF0aW9uVHlwZSA9PT0gUGF5UGFsSW50ZWdyYXRpb25UeXBlLkNsaWVudFNpZGVSRVNUKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTWFrZSBhIGNhbGwgdG8gdGhlIFJFU1QgYXBpIHRvIGV4ZWN1dGUgdGhlIHBheW1lbnRcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9ucy5wYXltZW50LmV4ZWN1dGUoKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5vblBheW1lbnRDb21wbGV0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoYFlvdSBzaG91bGQgcHJvdmlkZSBzb21lIGNhbGxiYWNrIHdoZW4gcGF5bWVudCBpcyBmaW5pc2hlZCB3aGVuIHVzaW5nIGNsaWVudCBzaWRlIGludGVncmF0aW9uYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25maWcub25QYXltZW50Q29tcGxldGUoZGF0YSwgYWN0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICBvbkVycm9yOiAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25maWcub25FcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLm9uRXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIG9uQ2FuY2VsOiAoZGF0YSwgYWN0aW9ucykgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLm9uQ2FuY2VsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25maWcub25DYW5jZWwoZGF0YSwgYWN0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5vbkNsaWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25maWcub25DbGljaygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB2YWxpZGF0ZTogKGFjdGlvbnMpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy52YWxpZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLnZhbGlkYXRlKGFjdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgYCMke3RoaXMucGF5UGFsQnV0dG9uQ29udGFpbmVySWR9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRDbGllbnQoKTogSVBheXBhbENsaWVudCB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmludGVncmF0aW9uVHlwZSA9PT0gUGF5UGFsSW50ZWdyYXRpb25UeXBlLkNsaWVudFNpZGVSRVNUKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5jb25maWcuY2xpZW50KSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihgWW91IG5lZWQgdG8gc2V0dXAgY2xpZW50IGluZm9ybWF0aW9uIHdoZW4gdXNpbmcgY2xpZW50IHNpZGUgaW50ZWdyYXRpb25gKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHByb2R1Y3Rpb246IHRoaXMuY29uZmlnLmNsaWVudC5wcm9kdWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgc2FuZGJveDogdGhpcy5jb25maWcuY2xpZW50LnNhbmRib3hcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRGdW5kaW5nKCk6IHtcclxuICAgICAgICBhbGxvd2VkOiBhbnlbXSxcclxuICAgICAgICBkaXNhbGxvd2VkOiBhbnlbXVxyXG4gICAgfSB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgLy8gcmVzb2x2ZSBmdW5kaW5nIHRvIHVzZSBwYXlwYWwncyBwcm9wZXJ0aWVzXHJcbiAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5mdW5kaW5nKSB7XHJcbiAgICAgICAgICAgIC8vIG5vIGZ1bmRpbmcgcHJvdmlkZWRcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGFsbG93ZWQ6IGFueVtdID0gW107XHJcbiAgICAgICAgY29uc3QgZGlzYWxsb3dlZDogYW55W10gPSBbXTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmZ1bmRpbmcuYWxsb3dlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5mdW5kaW5nLmFsbG93ZWQuZm9yRWFjaCh0eXBlID0+IHtcclxuICAgICAgICAgICAgICAgIGFsbG93ZWQucHVzaCh0aGlzLm1hcEZ1bmRpbmdUeXBlKHR5cGUpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5jb25maWcuZnVuZGluZy5kaXNhbGxvd2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmZ1bmRpbmcuZGlzYWxsb3dlZC5mb3JFYWNoKHR5cGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgZGlzYWxsb3dlZC5wdXNoKHRoaXMubWFwRnVuZGluZ1R5cGUodHlwZSkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGFsbG93ZWQ6IGFsbG93ZWQsXHJcbiAgICAgICAgICAgIGRpc2FsbG93ZWQ6IGRpc2FsbG93ZWRcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbWFwRnVuZGluZ1R5cGUodHlwZTogUGF5UGFsRnVuZGluZyk6IGFueSB7XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IFBheVBhbEZ1bmRpbmcuQ2FyZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcGF5cGFsLkZVTkRJTkcuQ0FSRDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IFBheVBhbEZ1bmRpbmcuQ3JlZGl0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXlwYWwuRlVORElORy5DUkVESVQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlID09PSBQYXlQYWxGdW5kaW5nLkVsdikge1xyXG4gICAgICAgICAgICByZXR1cm4gcGF5cGFsLkZVTkRJTkcuRUxWO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBFcnJvcihgVW5zdXBwb3J0ZWQgZnVuZGluZyB0eXBlICcke3R5cGV9J2ApO1xyXG4gICAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgTmd4UGF5cGFsQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3BheXBhbC1jb21wb25lbnQnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBpbXBvcnRzOiBbXHJcbiAgXSxcclxuICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIE5neFBheXBhbENvbXBvbmVudCxcclxuICBdLFxyXG4gIGV4cG9ydHM6IFtcclxuICAgIE5neFBheXBhbENvbXBvbmVudCxcclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hQYXlQYWxNb2R1bGUge1xyXG59XHJcblxyXG5cclxuIiwiZXhwb3J0IGVudW0gUGF5UGFsRW52aXJvbm1lbnQge1xyXG4gICAgU2FuZGJveCA9ICdzYW5kYm94JyxcclxuICAgIFByb2R1Y3Rpb24gPSAncHJvZHVjdGlvbidcclxufVxyXG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBQYXlQYWxGdW5kaW5nIH0gZnJvbSAnLi9wYXlwYWwtZnVuZGluZyc7XHJcbmltcG9ydCB7IFBheVBhbEVudmlyb25tZW50IH0gZnJvbSAnLi9wYXlwYWwtZW52aXJvbm1lbnQnO1xyXG5pbXBvcnQgeyBQYXlQYWxJbnRlZ3JhdGlvblR5cGUgfSBmcm9tICcuL3BheXBhbC1pbnRlZ3JhdGlvbic7XHJcblxyXG5leHBvcnQgY2xhc3MgUGF5UGFsQ29uZmlnIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNob3cgJ1BheSBOb3cnIGJ1dHRvbiBjb25maWdcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbW1pdCA9IHRydWU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIGludGVudCBvZiB0aGUgcGF5bWVudC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGludGVudCA9ICdzYWxlJztcclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCB0byBjcmVhdGUgbmV3IHBheW1lbnQgZm9yIHNlcnZlciBzaWRlIGludGVncmF0aW9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBwYXltZW50PzogKCkgPT4gT2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGVkIHRvIGV4ZWN1dGUgcGF5bWVudCBmb3Igc2VydmVyIHNpZGUgaW50ZWdyYXRpb25cclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uQXV0aG9yaXplPzogKGRhdGE6IElQYXlQYWxQYXltZW50Q29tcGxldGVEYXRhLCBhY3Rpb25zOiBhbnkpID0+IE9ic2VydmFibGU8dm9pZD47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDbGllbnQgdG9rZW5zIGZvciBjbGllbnQgc2lkZSBpbnRlZ3JhdGlvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY2xpZW50PzogSVBheXBhbENsaWVudDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFycmF5IG9mIHRyYW5zYWN0aW9uLCByZXF1aXJlZCBmb3IgY2xpZW50IHNpZGUgaW50ZWdyYXRpb25cclxuICAgICAqL1xyXG4gICAgcHVibGljIHRyYW5zYWN0aW9ucz86IElQYXlQYWxUcmFuc2FjdGlvbltdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGF5bWVudCBFeHBlcmllbmNlIGNvbmZpZ3VyYXRpb25zXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBleHBlcmllbmNlPzogSVBheVBhbEV4cGVyaWVuY2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgZm9yIGNsaWVudCBzaWRlIGludGVncmF0aW9uIHdoZW4gcGF5bWVudCBpcyBleGVjdXRlZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25QYXltZW50Q29tcGxldGU/OiAoZGF0YTogSVBheVBhbFBheW1lbnRDb21wbGV0ZURhdGEsIGFjdGlvbnM6IGFueSkgPT4gdm9pZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEJ1dHRvbiBjb25maWd1cmF0aW9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBidXR0b24/OiBJUGF5UGFsQnV0dG9uU3R5bGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXlwYWwgZnVuZGluZyBjb25maWd1cmF0aW9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBmdW5kaW5nPzogSVBheVBhbEZ1bmRpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgd2hlbiBQYXlQYWwgZXhwZXJpZW5jZXMgYW4gZXJyb3JcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uRXJyb3I/OiAoZXJyOiBhbnkpID0+IHZvaWQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIGhhbmRsZXIgd2lsbCBiZSBjYWxsZWQgZm9yIGV2ZXJ5IGNsaWNrIG9uIHRoZSBQYXlQYWwgYnV0dG9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvbkNsaWNrPzogKCkgPT4gdm9pZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCB3aGVuIHVzZXIgY2FuY2VscyBwYXltZW50XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvbkNhbmNlbD86IChkYXRhOiBJUGF5UGFsQ2FuY2VsUGF5bWVudCwgYWN0aW9uczogYW55KSA9PiB2b2lkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FuIGJlIHVzZWQgdG8gdmFsaWRhdGlvbiBhcyBjYW4gYmUgc2VlbiBoZXJlOiBodHRwczovL2RldmVsb3Blci5wYXlwYWwuY29tL2RlbW8vY2hlY2tvdXQvIy9wYXR0ZXJuL3ZhbGlkYXRpb25cclxuICAgICAqL1xyXG4gICAgcHVibGljIHZhbGlkYXRlPzogKGFjdGlvbnM6IGFueSkgPT4gdm9pZDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUeXBlIG9mIHRoZSBpbnRlZ3JhdGlvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBpbnRlZ3JhdGlvblR5cGU6IFBheVBhbEludGVncmF0aW9uVHlwZSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBFbnZpcm9ubWVudFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBlbnZpcm9ubWVudDogUGF5UGFsRW52aXJvbm1lbnQsXHJcbiAgICAgICAgY29uZmlnOiB7XHJcbiAgICAgICAgICAgIG9uRXJyb3I/OiAoZXJyOiBhbnkpID0+IHZvaWQsXHJcbiAgICAgICAgICAgIG9uQ2xpY2s/OiAoKSA9PiB2b2lkLFxyXG4gICAgICAgICAgICB2YWxpZGF0ZT86IChhY3Rpb25zOiBhbnkpID0+IHZvaWQ7XHJcbiAgICAgICAgICAgIG9uQ2FuY2VsPzogKGRhdGE6IElQYXlQYWxDYW5jZWxQYXltZW50LCBhY3Rpb25zOiBhbnkpID0+IHZvaWQsXHJcbiAgICAgICAgICAgIHBheW1lbnQ/OiAoKSA9PiBPYnNlcnZhYmxlPHN0cmluZz4sXHJcbiAgICAgICAgICAgIGludGVudD86IHN0cmluZyxcclxuICAgICAgICAgICAgb25BdXRob3JpemU/OiAoZGF0YTogSVBheVBhbFBheW1lbnRDb21wbGV0ZURhdGEsIGFjdGlvbnM6IGFueSkgPT4gT2JzZXJ2YWJsZTx2b2lkPixcclxuICAgICAgICAgICAgY2xpZW50PzogSVBheXBhbENsaWVudCxcclxuICAgICAgICAgICAgb25QYXltZW50Q29tcGxldGU/OiAoZGF0YTogSVBheVBhbFBheW1lbnRDb21wbGV0ZURhdGEsIGFjdGlvbnM6IGFueSkgPT4gdm9pZCxcclxuICAgICAgICAgICAgdHJhbnNhY3Rpb25zPzogSVBheVBhbFRyYW5zYWN0aW9uW10sXHJcbiAgICAgICAgICAgIG5vdGVfdG9fcGF5ZXI/OiBzdHJpbmc7XHJcbiAgICAgICAgICAgIGV4cGVyaWVuY2U/OiBJUGF5UGFsRXhwZXJpZW5jZSxcclxuICAgICAgICAgICAgY29tbWl0PzogYm9vbGVhbixcclxuICAgICAgICAgICAgYnV0dG9uPzogSVBheVBhbEJ1dHRvblN0eWxlLFxyXG4gICAgICAgICAgICBmdW5kaW5nPzogSVBheVBhbEZ1bmRpbmdcclxuICAgICAgICB9KSB7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjb25maWcpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElQYXlQYWxQYXltZW50Q29tcGxldGVEYXRhIHtcclxuICAgIGludGVudDogc3RyaW5nO1xyXG4gICAgb3JkZXJJRDogc3RyaW5nO1xyXG4gICAgcGF5ZXJJRDogc3RyaW5nO1xyXG4gICAgcGF5bWVudElEOiBzdHJpbmc7XHJcbiAgICBwYXltZW50VG9rZW46IHN0cmluZztcclxuICAgIHJldHVyblVybDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElQYXlQYWxDYW5jZWxQYXltZW50IHtcclxuICAgIGRhdGE6IElQYXlQYWxDYW5jZWxQYXltZW50RGF0YTtcclxuICAgIGFjdGlvbnM6IGFueTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJUGF5UGFsQ2FuY2VsUGF5bWVudERhdGEge1xyXG4gICAgYmlsbGluZ0lEOiBzdHJpbmc7XHJcbiAgICBjYW5jZWxVcmw6IHN0cmluZztcclxuICAgIGludGVudDogc3RyaW5nO1xyXG4gICAgcGF5bWVudElEOiBzdHJpbmc7XHJcbiAgICBwYXltZW50VG9rZW46IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJUGF5cGFsQ2xpZW50IHtcclxuICAgIHNhbmRib3g/OiBzdHJpbmc7XHJcbiAgICBwcm9kdWN0aW9uPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElQYXlQYWxUcmFuc2FjdGlvbiB7XHJcbiAgICBhbW91bnQ6IElQYXlQYWxBbW91bnQ7XHJcbiAgICBkZXNjcmlwdGlvbj86IHN0cmluZztcclxuICAgIGN1c3RvbT86IHN0cmluZztcclxuICAgIHBheW1lbnRfb3B0aW9ucz86IElQYXlQYWxUcmFuc2FjdGlvblBheW1lbnRPcHRpb25zO1xyXG4gICAgaW52b2ljZV9udW1iZXI/OiBzdHJpbmc7XHJcbiAgICBzb2Z0X2Rlc2NyaXB0b3I/OiBzdHJpbmc7XHJcbiAgICBpdGVtX2xpc3Q/OiBJUGF5UGFsVHJhbnNhY3Rpb25JdGVtTGlzdDtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJUGF5UGFsVHJhbnNhY3Rpb25JdGVtTGlzdCB7XHJcbiAgICBpdGVtcz86IElQYXlQYWxUcmFuc2FjdGlvbkl0ZW1bXTtcclxuICAgIHNoaXBwaW5nX2FkZHJlc3M/OiBJUGF5UGFsVHJhbnNhY3Rpb25TaGlwcGluZ0FkZHJlc3M7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVBheVBhbFRyYW5zYWN0aW9uSXRlbSB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBjdXJyZW5jeTogc3RyaW5nO1xyXG4gICAgcHJpY2U6IG51bWJlcjtcclxuICAgIHF1YW50aXR5OiBudW1iZXI7XHJcblxyXG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XHJcbiAgICB0YXg/OiBudW1iZXI7XHJcbiAgICBza3U/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVBheVBhbEFtb3VudCB7XHJcbiAgICB0b3RhbDogbnVtYmVyO1xyXG4gICAgY3VycmVuY3k6IHN0cmluZztcclxuICAgIGRldGFpbHM/OiBJUGF5UGFsQW1vdW50RGV0YWlscztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJUGF5UGFsVHJhbnNhY3Rpb25TaGlwcGluZ0FkZHJlc3Mge1xyXG4gICAgcmVjaXBpZW50X25hbWU6IHN0cmluZztcclxuICAgIGxpbmUxOiBzdHJpbmc7XHJcbiAgICBsaW5lMj86IHN0cmluZztcclxuICAgIGNpdHk6IHN0cmluZztcclxuICAgIGNvdW50cnlfY29kZTogc3RyaW5nO1xyXG4gICAgcG9zdGFsX2NvZGU6IHN0cmluZztcclxuICAgIHBob25lOiBzdHJpbmc7XHJcbiAgICBzdGF0ZTogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElQYXlQYWxBbW91bnREZXRhaWxzIHtcclxuICAgIHN1YnRvdGFsOiBudW1iZXI7XHJcbiAgICB0YXg6IG51bWJlcjtcclxuICAgIHNoaXBwaW5nOiBudW1iZXI7XHJcbiAgICBoYW5kbGluZ19mZWU6IG51bWJlcjtcclxuICAgIHNoaXBwaW5nX2Rpc2NvdW50OiBudW1iZXI7XHJcbiAgICBpbnN1cmFuY2U6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJUGF5UGFsVHJhbnNhY3Rpb25QYXltZW50T3B0aW9ucyB7XHJcbiAgICBhbGxvd2VkX3BheW1lbnRfbWV0aG9kPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElQYXlQYWxFeHBlcmllbmNlIHtcclxuICAgIC8qKiBJbmRpY2F0ZXMgd2hldGhlciBQYXlQYWwgZGlzcGxheXMgc2hpcHBpbmcgYWRkcmVzcyBmaWVsZHMgb24gdGhlIGV4cGVyaWVuY2UgcGFnZXMgKi9cclxuICAgIG5vU2hpcHBpbmc/OiBib29sZWFuO1xyXG4gICAgLyoqIEEgbGFiZWwgdGhhdCBvdmVycmlkZXMgdGhlIGJ1c2luZXNzIG5hbWUgaW4gdGhlIFBheVBhbCBhY2NvdW50IG9uIHRoZSBQYXlQYWwgcGFnZXMuIE1heCBsZW5ndGg6IDEyNyBjaGFyYWN0ZXJzLiAqL1xyXG4gICAgYnJhbmROYW1lPzogc3RyaW5nO1xyXG4gICAgLyoqIFVSTCB0byB0aGUgbG9nbyBpbWFnZSAoZ2lmLCBqcGcsIG9yIHBuZykuIFRoZSBpbWFnZSdzIG1heGltdW0gd2lkdGggaXMgMTkwIHBpeGVscyBhbmQgbWF4aW11bSBoZWlnaHQgaXMgNjAgcGl4ZWxzLiAqL1xyXG4gICAgbG9nb0ltYWdlPzogc3RyaW5nO1xyXG4gICAgLyoqIExvY2FsZSBpbiB3aGljaCB0byBkaXNwbGF5IFBheVBhbCBwYWdlICovXHJcbiAgICBsb2NhbGVDb2RlPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElQYXlQYWxCdXR0b25TdHlsZSB7XHJcbiAgICBsYWJlbD86ICdjaGVja291dCcgfCAncGF5JyB8ICdidXlub3cnIHwgJ3BheXBhbCc7XHJcbiAgICBzaXplPzogJ3NtYWxsJyB8ICdtZWRpdW0nIHwgJ2xhcmdlJyB8ICdyZXNwb25zaXZlJztcclxuICAgIHNoYXBlPzogJ3BpbGwnIHwgJ3JlY3QnO1xyXG4gICAgY29sb3I/OiAnZ29sZCcgfCAnYmx1ZScgfCAnc2lsdmVyJyB8ICdibGFjayc7XHJcbiAgICBsYXlvdXQ/OiAnaG9yaXpvbnRhbCcgfCAndmVydGljYWwnO1xyXG4gICAgdGFnbGluZT86IGZhbHNlO1xyXG4gICAgZnVuZGluZ2ljb25zPzogYm9vbGVhbjtcclxuICAgIGJyYW5kaW5nPzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJUGF5UGFsRnVuZGluZyB7XHJcbiAgICBhbGxvd2VkOiBQYXlQYWxGdW5kaW5nW107XHJcbiAgICBkaXNhbGxvd2VkOiBQYXlQYWxGdW5kaW5nW107XHJcbn1cclxuXHJcbiJdLCJuYW1lcyI6WyJTdWJqZWN0IiwiaW50ZXJ2YWwiLCJ0YWtlVW50aWwiLCJtYXAiLCJDb21wb25lbnQiLCJDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSIsIklucHV0IiwiVmlld0NoaWxkIiwiTmdNb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztRQUNJLE9BQUk7UUFDSixTQUFNO1FBQ04sTUFBRzs7Ozs7Ozs7Ozs7O1FDRkgsaUJBQWM7UUFDZCxpQkFBYzs7Ozs7Ozs7O0FDRmxCO1FBaUdJOzs7O1lBeERTLG9CQUFlLEdBQUcsS0FBSyxDQUFDOzs7O1lBVXpCLDZDQUF3QyxHQUFHLEtBQUssQ0FBQzs7OztZQWV4Qyx3QkFBbUIsR0FBRyxFQUFFLENBQUM7Ozs7WUFLekIsd0JBQW1CLEdBQUcsSUFBSSxDQUFDOzs7O1lBSzNCLHFCQUFnQixHQUFHLFFBQVEsQ0FBQzs7OztZQUs1QixnQ0FBMkIsR0FBRyw2QkFBNkIsQ0FBQzs7OztZQUs1RCxvQkFBZSxHQUFHLCtDQUErQyxDQUFDO1lBT2xFLGtDQUE2QixHQUFHLDhCQUE4QixDQUFDO1lBRS9ELGtCQUFhLEdBQWtCLElBQUlBLFlBQU8sRUFBUSxDQUFDO1NBSW5FO1FBMUNELHNCQUE0Qyx5REFBeUI7Ozs7Z0JBQXJFLFVBQXNFLE9BQW1CO2dCQUNyRixJQUFJLE9BQU8sRUFBRTtvQkFDVCxJQUFJLENBQUMsMEJBQTBCLEdBQUcsT0FBTyxD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